---
- name: Copy docker and build files
  copy:
    src: '{{ item }}'
    dest: '~/{{ project_dir }}/'
  with_items:
    - Dockerfile
    - requirements.txt
    - setup.py
    - README.rst

- name: Copy env files
  copy:
    src: '{{ playbook_dir }}/scripts/docker/'
    dest: ~/{{ project_dir }}/scripts/docker/

- name: Copy Geonode
  copy:
    src: '{{ playbook_dir }}/geonode/'
    dest: ~/{{ project_dir }}/geonode/

- name: Template docker-compose files
  template:
    src: '{{ item }}.j2'
    dest: ~/{{ project_dir }}/{{ item }}
  with_items:
    - docker-compose.yml
    - docker-compose.override-hostname.yml
    - docker-compose.override-volumes.yml

# - name: Refresh private_ip var
#   include_vars: group_vars/{{ envt }}

- name: create static folder
  file:
    name: ~/{{ project_dir }}/static
    state: directory

- name: Launch the stack
  command: docker-compose -f docker-compose.yml -f docker-compose.override-hostname.yml -f docker-compose.override-volumes.yml up --build
  args:
    chdir: '~/{{ project_dir }}'
  ignore_errors: True
  # no_log: True

# Commented because it requires modules installed (in roles/prep_server)
# which failed with fatal error: ffi.h: No such file or directory
# - name: Launch the stack
#   docker_service:
#     project_src: ~/{{ project_dir }}
#     files:
#       - docker-compose.override.yml
#     build: yes
#   become: True
#   environment:
#     PYTHONPATH: "{{ lookup('env','PYTHONPATH') }}:/usr/lib/python2.7/dist-packages"

# - name: Prepare the stack (without running) 2/2
#   command: docker-compose -f docker-compose.yml up --no-start
#   args:
#     chdir: '{{ ansible_env.HOME }}/{{ project_dir }}'
#   become: true
#
# - name: Start the database
#   command: docker-compose -f docker-compose.yml up -d db
#   args:
#     chdir: '{{ ansible_env.HOME }}/{{ project_dir }}'
#   become: true
#
# - debug: msg="{{ lookup('env','PATH') }} is an environment variable"
#
# - name: Initialise geoserver
#   command: docker-compose -f docker-compose.yml run --rm geoserver true
#   args:
#     chdir: '{{ ansible_env.HOME }}/{{ project_dir }}'
#     executable: /bin/bash
#   become: true
