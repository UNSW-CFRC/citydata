---
- name: Git Geonode
  git:
    repo: https://github.com/GeoNode/geonode
    dest: '{{ ansible_env.HOME }}/geonode'
  # ignore_errors: True
  # no_log: True

# - name: rename subdir to project_dir
#   command: mv geonode-project {{ project_dir }}
#   args:
#     chdir: '{{ ansible_env.HOME }}/{{ project_dir }}'
#     creates: '{{ ansible_env.HOME }}/{{ project_dir }}/{{ project_dir }}'
#
# - name: Template geonode-project files from Ansible Control to server
#   template:
#     src: '{{ item }}'
#     dest: '~/{{ project_dir }}/{{ project_dir }}/'
#   with_fileglob:
#     - '{{ playbook_dir }}/geonode-project/*.py'
#     - '{{ playbook_dir }}/geonode-project/*.py.sample'
#
# - name: Template home dir files from Ansible Control to server
#   template:
#     src: '{{ item }}'
#     dest: '~/{{ project_dir }}/'
#   with_fileglob:
#     - '{{ playbook_dir }}/.env'
#     - '{{ playbook_dir }}/docker*.yml'
#     - '{{ playbook_dir }}/Dockerfile'
#     - '{{ playbook_dir }}/*.py'
#     # - '{{ playbook_dir }}/playbook.yml'
#     - '{{ playbook_dir }}/uwsgi.ini'

- name: Duplicate localhost override for private IP
  command: cp docker-compose.override.localhost.yml docker-compose.override.{{ http_hostname }}.yml
  args:
    chdir: '{{ ansible_env.HOME }}/geonode'
    creates: '{{ ansible_env.HOME }}/geonode/docker-compose.override.{{ http_hostname }}.yml'

- name: Set private IP address as host
  replace:
    path: '{{ ansible_env.HOME }}/geonode/docker-compose.override.{{ http_hostname }}.yml'
    regexp: localhost
    replace: '{{ http_hostname }}'

- name: Refresh private_ip var
  include_vars: group_vars/{{ envt }}

- name: Launch the stack
  command: docker-compose -f docker-compose.yml -f docker-compose.override.{{ http_hostname }}.yml up --build
  args:
    chdir: '{{ ansible_env.HOME }}/geonode'
  ignore_errors: True
  no_log: True

# - name: Prepare the stack (without running) 2/2
#   command: docker-compose -f docker-compose.yml up --no-start
#   args:
#     chdir: '{{ ansible_env.HOME }}/{{ project_dir }}'
#   become: true
#
# - name: Start the database
#   command: docker-compose -f docker-compose.yml up -d db
#   args:
#     chdir: '{{ ansible_env.HOME }}/{{ project_dir }}'
#   become: true
#
# - debug: msg="{{ lookup('env','PATH') }} is an environment variable"
#
# - name: Initialise geoserver
#   command: docker-compose -f docker-compose.yml run --rm geoserver true
#   args:
#     chdir: '{{ ansible_env.HOME }}/{{ project_dir }}'
#     executable: /bin/bash
#   become: true
#
# # Assumes push.yml has been run to copy the backup database to the target server
# - name: Create the postgres database if previously dropped
#   command: docker exec -i db4{{ project_name }} createdb -U postgres postgres
#   become: True
#   ignore_errors: True
#
# - name: Restore database
#   shell:  cat {{ backup_dir }}/pg_dumpall.custom | docker exec -i db4{{ project_name }} psql -U postgres
#   become: True
#
# - name: Drop the postgres database
#   command: docker exec -i db4{{ project_name }} dropdb -U postgres postgres
#   become: True
#
# - name: Rename geonode database to postgres
#   command: docker exec -i db4{{ project_name }} psql -d template1 -U postgres -c "ALTER DATABASE geonode RENAME TO postgres;"
#   become: True
#   ignore_errors: True
#   no_log: True
#
# - name: Restore django uploaded files
#   command: docker cp {{ project_dir }}/uploaded django4{{ project_name }}:/uploaded
#   args:
#     chdir: '{{ ansible_env.HOME }}/{{ project_dir }}'
#   become: True
#
# - name: Restore the workspaces and styles of the geoserver data directory
#   command: docker cp {{ gsdata }}/{{ item }} geoserver4{{ project_name }}:/geoserver_data/data/{{ item }}
#   with_items:
#     - styles
#     - workspaces
#     # Not done coz no geoserver-data/data subdir:
#     # docker cp geodatadir/data/. spcgeonode_geoserver_1:/spcgeonode-geodatadir/data
#     # - data
#   become: True
#
# - name: Fix inconsistency that prevents migrations
#   command: docker exec -i db4{{ project_name }} psql -U postgres -c "ALTER TABLE public.layers_layer DROP COLUMN service_id;"
#   become: True
#   ignore_errors: True
#   no_log: True
#
# - name: Migrate with fake initial
#   command: docker-compose -f docker-compose.yml run --rm --entrypoint "" django python manage.py migrate --fake-initial
#   args:
#     chdir: '{{ ansible_env.HOME }}/{{ project_dir }}'
#   become: True

# - name: Create the SQL diff to fix the schema
#   # TODO : upstream some changes to django-extensions for this to work directly
#   command: docker-compose -f docker-compose.yml run --rm --entrypoint "" django /bin/sh -c "DJANGO_COLORS=nocolor python manage.py sqldiff -ae" > fix.sql
#   args:
#     chdir: '{{ ansible_env.HOME }}/{{ project_dir }}'
#   become: True
